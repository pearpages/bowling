{"version":3,"sources":["components/Frame.tsx","components/Pins.tsx","models/models.ts","models/Frame.ts","models/LastFrame.ts","models/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCSSclasses","options","classes","isActive","push","isLast","join","Frame","props","roll1","roll2","score","id","react_default","a","createElement","className","roll3","Pins","min","max","clickHandler","buttons","map","value","index","key","type","onClick","TOTAL_PINS","ERROR_MESSAGE","isValueCorrect","currentPins","isInRange","Object","classCallCheck","this","nextFrame","previousFrame","createClass","frame","previous","next","undefined","hasStrike","isSpare","getRoll1","hasRoll1","Error","hasAllRolls","previousFrameScore","getScore","hasSpareRoll","getSpareRoll","hasStrikeRolls","getStrikeRolls","getRoll2","hasNextRoll","hasRoll2","getNextRoll","LastFrame","_this","hasRoll3","getRoll3","hasSpare","canAdd3rRoll","canAddRoll","Game","frames","currentFrameIndex","frame10","frame9","frame8","frame7","frame6","frame5","frame4","frame3","frame2","frame1","setNextFrame","setPreviousFrame","setSiblingFrames","getCurrentFrame","addRoll","isLastFrame","length","getNewGame","game","getFrames","App","_Component","possibleConstructorReturn","getPrototypeOf","call","updateFrames","state","setState","slice","restartGame","inherits","_this2","Fragment","Frame_Frame","getCurrentFrameIndex","getFramesCount","getHtmlRoll1","getHtmlRoll2","getHtmlRoll3","hasScoreReady","Pins_Pins","currentFrame","getPinsLeft","isCompleted","style","marginLeft","get","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06671e67.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Frame.scss\";\n// import { Frame as FrameModel } from \"../models/Frame\";\n\nfunction getCSSclasses(options: {\n  isActive?: boolean;\n  isLast?: boolean;\n}): string {\n  const classes: string[] = [\"frame\"];\n  if (options.isActive) {\n    classes.push(\"frame--active\");\n  }\n  if (options.isLast) {\n    classes.push(\"frame--last\");\n  }\n  return classes.join(\" \");\n}\n\nexport function Frame(props: {\n  roll1: string;\n  roll2: string;\n  roll3?: string;\n  score?: number;\n  id: number;\n  isActive: boolean;\n  isLast: boolean;\n}) {\n  const { roll1, roll2, score, id, isLast } = props;\n  return (\n    <div className={getCSSclasses(props)}>\n      <div className=\"frame__header\">{id}</div>\n      <div className=\"frame__body\">\n        <div className=\"rolls\">\n          <div className=\"rolls__roll1\">{roll1}</div>\n          <div className=\"rolls__roll2\">{roll2}</div>\n          {isLast ? (\n            <div className=\"rolls__roll3\">{props.roll3 ? props.roll3 : \"\"}</div>\n          ) : null}\n        </div>\n        <div className=\"score\">{score}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./Pins.scss\";\n\nexport function Pins(props: {\n  min: number;\n  max: number;\n  clickHandler: (value: number) => void;\n}) {\n  let { min, max, clickHandler } = props;\n  const buttons = [];\n  if (min < max) {\n    while (min <= max) {\n      buttons.push(min);\n      min++;\n    }\n  }\n\n  return (\n    <div className=\"pins\">\n      {buttons.map((value: number, index: number) => (\n        <div key={index}>\n          <button\n            className=\"pin-down\"\n            type=\"button\"\n            onClick={() => clickHandler(value)}\n          >\n            {value}\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","export const TOTAL_PINS = 10;\nexport const ERROR_MESSAGE = {\n  ALL_ROLLS: \"All rolls populated\",\n  COMPLETE: \"Frame is complete\",\n  WRONG_VALUE: \"Wrong value\",\n  STRIKE: \"Already a strike\",\n  MISSING_SPARE_ROLL: \"Missing Spare Roll\",\n  MISSING_STRIKE_ROLLS: \"Missing Strike Rolls\"\n};\n\nexport interface iFrame {\n  getHtmlRoll1: () => string;\n  getHtmlRoll2: () => string;\n  hasScoreReady: () => boolean;\n  getScore: () => number;\n  getPinsLeft: () => number;\n  canAddRoll: () => boolean;\n  addRoll: (value: number) => void;\n  getRoll1: () => number;\n  hasRoll1: () => boolean;\n  getRoll2: () => number;\n  hasRoll2: () => boolean;\n  getHtmlRoll3?: () => string;\n  hasRoll3?: () => boolean;\n  hasStrike: () => boolean;\n  hasNextRoll: () => boolean;\n  getNextRoll: () => number;\n}\n\nexport function isValueCorrect(value: number, currentPins: number): boolean {\n  return isInRange(value) && value + currentPins <= TOTAL_PINS;\n}\n\nexport function isInRange(value: number): boolean {\n  return value >= 0 && value <= TOTAL_PINS;\n}\n","import { TOTAL_PINS, iFrame, ERROR_MESSAGE, isValueCorrect } from \"./models\";\n\nexport class Frame implements iFrame {\n  private roll1!: number;\n  private roll2!: number;\n  private nextFrame!: iFrame;\n  private previousFrame!: iFrame;\n\n  setNextFrame(frame: iFrame) {\n    this.nextFrame = frame;\n  }\n\n  setPreviousFrame(frame: iFrame) {\n    this.previousFrame = frame;\n  }\n\n  setSiblingFrames(previous: iFrame, next: iFrame) {\n    this.previousFrame = previous;\n    this.nextFrame = next;\n  }\n\n  getRoll1(): number {\n    return this.roll1 || 0;\n  }\n\n  getRoll2(): number {\n    return this.roll2 || 0;\n  }\n\n  getHtmlRoll1(): string {\n    if (this.roll1 === undefined || this.hasStrike()) {\n      return \"\";\n    }\n    return this.roll1 + \"\";\n  }\n  getHtmlRoll2(): string {\n    if (this.hasStrike()) {\n      return \"X\";\n    } else if (this.roll2 === undefined) {\n      return \"\";\n    } else if (this.isSpare()) {\n      return \"/\";\n    } else return this.roll2 + \"\";\n  }\n\n  hasRoll1(): boolean {\n    return this.roll1 !== undefined;\n  }\n\n  hasRoll2(): boolean {\n    return this.roll2 !== undefined;\n  }\n\n  getPinsLeft(): number {\n    return TOTAL_PINS - this.getRoll1();\n  }\n\n  getNextRoll(): number {\n    if (this.nextFrame) {\n      return this.nextFrame.getRoll1();\n    }\n    return 0;\n  }\n\n  hasNextRoll(): boolean {\n    if (this.nextFrame) {\n      return this.nextFrame.hasRoll1();\n    }\n    return false;\n  }\n\n  addRoll(value: number): void {\n    if (this.hasStrike()) {\n      throw new Error(ERROR_MESSAGE.STRIKE);\n    } else if (this.hasAllRolls()) {\n      throw new Error(ERROR_MESSAGE.ALL_ROLLS);\n    } else if (!isValueCorrect(value, this.getRoll1())) {\n      throw new Error(ERROR_MESSAGE.WRONG_VALUE);\n    }\n\n    if (this.roll1 === undefined) {\n      this.roll1 = value;\n    } else if (this.roll2 === undefined) {\n      this.roll2 = value;\n    }\n  }\n\n  getScore(): number {\n    let previousFrameScore = 0;\n    if (!!this.previousFrame) {\n      previousFrameScore = this.previousFrame.getScore();\n    }\n    if (this.isSpare()) {\n      if (this.hasSpareRoll()) {\n        return previousFrameScore + TOTAL_PINS + this.getSpareRoll();\n      }\n      throw new Error(ERROR_MESSAGE.MISSING_SPARE_ROLL);\n    } else if (this.hasStrike()) {\n      if (this.hasStrikeRolls()) {\n        return previousFrameScore + TOTAL_PINS + this.getStrikeRolls();\n      }\n      throw new Error(ERROR_MESSAGE.MISSING_STRIKE_ROLLS);\n    }\n    return previousFrameScore + this.getRoll1() + this.getRoll2();\n  }\n\n  hasStrike(): boolean {\n    return this.getRoll1() === TOTAL_PINS;\n  }\n\n  isSpare(): boolean {\n    return !this.hasStrike() && this.getRoll1() + this.getRoll2() === 10;\n  }\n\n  hasAllRolls(): boolean {\n    return this.roll1 !== undefined && this.roll2 !== undefined;\n  }\n\n  hasSpareRoll(): boolean {\n    return !!this.nextFrame && !!this.nextFrame.getRoll1();\n  }\n\n  getSpareRoll(): number {\n    if (this.nextFrame) {\n      return this.nextFrame.getRoll1();\n    }\n    return 0;\n  }\n\n  hasStrikeRolls(): boolean {\n    if (!this.nextFrame) {\n      return false;\n    }\n    if (this.nextFrame.hasStrike()) {\n      return this.nextFrame.hasRoll1() && this.nextFrame.hasNextRoll();\n    }\n    return this.nextFrame.hasRoll1() && this.nextFrame.hasRoll2();\n  }\n\n  getStrikeRolls(): number {\n    if (this.nextFrame) {\n      if (this.nextFrame.hasStrike()) {\n        return TOTAL_PINS + this.nextFrame.getNextRoll();\n      }\n      return this.nextFrame.getRoll1() + this.nextFrame.getRoll2();\n    }\n    return 0;\n  }\n\n  canAddRoll(): boolean {\n    return !this.hasAllRolls() && !this.hasStrike();\n  }\n\n  hasScoreReady(): boolean {\n    return (\n      (this.hasAllRolls() && !this.isSpare()) ||\n      (this.isSpare() && this.hasSpareRoll()) ||\n      (this.hasStrike() && this.hasStrikeRolls())\n    );\n  }\n}\n","import {\n  iFrame,\n  TOTAL_PINS,\n  ERROR_MESSAGE,\n  isValueCorrect,\n  isInRange\n} from \"./models\";\n\nexport class LastFrame implements iFrame {\n  private roll1!: number;\n  private roll2!: number;\n  private roll3!: number;\n  private previousFrame!: iFrame;\n\n  setPreviousFrame(frame: iFrame) {\n    this.previousFrame = frame;\n  }\n\n  getRoll1(): number {\n    return this.roll1 || 0;\n  }\n\n  getRoll2(): number {\n    return this.roll2 || 0;\n  }\n\n  getRoll3(): number {\n    return this.roll3 || 0;\n  }\n\n  getHtmlRoll1(): string {\n    if (this.roll1 === undefined) {\n      return \"\";\n    } else if (this.roll1 === TOTAL_PINS) {\n      return \"X\";\n    }\n    return this.roll1 + \"\";\n  }\n\n  getHtmlRoll2(): string {\n    if (this.roll2 === undefined) {\n      return \"\";\n    } else if (this.roll1 + this.roll2 === TOTAL_PINS) {\n      return \"/\";\n    } else if (this.roll2 === TOTAL_PINS) {\n      return \"X\";\n    }\n    return this.roll2 + \"\";\n  }\n\n  getHtmlRoll3(): string {\n    if (this.roll3 === undefined) {\n      return \"\";\n    } else if (this.roll3 === TOTAL_PINS) {\n      return \"X\";\n    }\n    return this.roll2 + \"\";\n  }\n\n  hasRoll1(): boolean {\n    return this.roll1 !== undefined;\n  }\n\n  hasRoll2(): boolean {\n    return this.roll2 !== undefined;\n  }\n\n  hasRoll3(): boolean {\n    return this.roll3 !== undefined;\n  }\n\n  getPinsLeft(): number {\n    if (this.hasRoll3()) {\n      return 0;\n    } else if (this.hasSpare()) {\n      return TOTAL_PINS;\n    } else if (this.hasRoll1() && this.hasRoll2() && this.hasStrike()) {\n      return TOTAL_PINS;\n    }\n    return TOTAL_PINS - this.getRoll1() - this.getRoll2();\n  }\n\n  hasSpare(): boolean {\n    return this.getRoll1() + this.getRoll2() === TOTAL_PINS;\n  }\n\n  hasStrike(): boolean {\n    return this.getRoll1() === TOTAL_PINS || this.getRoll2() === TOTAL_PINS;\n  }\n\n  canAddRoll(): boolean {\n    if (!this.hasRoll1() || !this.hasRoll2()) {\n      return true;\n    }\n    return this.canAdd3rRoll();\n  }\n\n  canAdd3rRoll(): boolean {\n    return !this.hasRoll3() && (this.hasSpare() || this.hasStrike());\n  }\n\n  isValueCorrect(value: number, currentPins: number): boolean {\n    if (this.getRoll1() === TOTAL_PINS) {\n      return isInRange(value);\n    }\n    if (!this.hasRoll2()) {\n      return isValueCorrect(value, currentPins);\n    }\n    return isInRange(value);\n  }\n\n  addRoll(value: number): void {\n    if (!this.canAddRoll()) {\n      throw new Error(ERROR_MESSAGE.ALL_ROLLS);\n    } else if (!this.isValueCorrect(value, this.getRoll1() + this.getRoll2())) {\n      throw new Error(ERROR_MESSAGE.WRONG_VALUE);\n    }\n\n    if (!this.hasRoll1()) {\n      this.roll1 = value;\n    } else if (!this.hasRoll2()) {\n      this.roll2 = value;\n    } else if (this.canAdd3rRoll()) {\n      this.roll3 = value;\n    }\n  }\n\n  getScore(): number {\n    let previousFrameScore = 0;\n    if (!!this.previousFrame) {\n      previousFrameScore = this.previousFrame.getScore();\n    }\n    if (this.hasSpare()) {\n      if (this.hasSpareRoll()) {\n        return previousFrameScore + TOTAL_PINS + this.getSpareRoll();\n      }\n      throw new Error(ERROR_MESSAGE.MISSING_SPARE_ROLL);\n    } else if (this.hasStrike()) {\n      if (this.hasStrikeRolls()) {\n        return previousFrameScore + TOTAL_PINS + this.getStrikeRolls();\n      }\n      throw new Error(ERROR_MESSAGE.MISSING_STRIKE_ROLLS);\n    }\n    return previousFrameScore + this.getRoll1() + this.getRoll2();\n  }\n\n  hasSpareRoll(): boolean {\n    return this.hasRoll3();\n  }\n\n  getSpareRoll(): number {\n    return this.getRoll3();\n  }\n\n  hasStrikeRolls(): boolean {\n    return this.hasRoll2() && this.hasRoll3();\n  }\n\n  getStrikeRolls(): number {\n    return this.getRoll2() + this.getRoll3();\n  }\n\n  isCompleted(): boolean {\n    return !this.canAddRoll();\n  }\n\n  hasScoreReady(): boolean {\n    return !this.canAddRoll();\n  }\n\n  hasNextRoll = () => this.hasRoll3();\n\n  getNextRoll = () => this.getRoll3();\n}\n","import { TOTAL_PINS, iFrame } from \"./models\";\nimport { Frame } from \"./Frame\";\nimport { LastFrame } from \"./LastFrame\";\n\nexport function roll(): number {\n  return Math.floor((TOTAL_PINS + 1) * Math.random());\n}\n\nexport class Game {\n  frames: Array<iFrame>;\n  currentFrameIndex = 0;\n\n  constructor() {\n    const frame10 = new LastFrame();\n    const frame9 = new Frame();\n    const frame8 = new Frame();\n    const frame7 = new Frame();\n    const frame6 = new Frame();\n    const frame5 = new Frame();\n    const frame4 = new Frame();\n    const frame3 = new Frame();\n    const frame2 = new Frame();\n    const frame1 = new Frame();\n    frame1.setNextFrame(frame2);\n    frame10.setPreviousFrame(frame9);\n    frame2.setSiblingFrames(frame1, frame3);\n    frame3.setSiblingFrames(frame2, frame4);\n    frame4.setSiblingFrames(frame3, frame5);\n    frame5.setSiblingFrames(frame4, frame6);\n    frame6.setSiblingFrames(frame5, frame7);\n    frame7.setSiblingFrames(frame6, frame8);\n    frame8.setSiblingFrames(frame7, frame9);\n    frame9.setSiblingFrames(frame8, frame10);\n    this.frames = [\n      frame1,\n      frame2,\n      frame3,\n      frame4,\n      frame5,\n      frame6,\n      frame7,\n      frame8,\n      frame9,\n      frame10\n    ];\n  }\n\n  addRoll(value: number) {\n    this.getCurrentFrame().addRoll(value);\n    if (!this.getCurrentFrame().canAddRoll() && !this.isLastFrame()) {\n      this.currentFrameIndex++;\n    }\n  }\n\n  getCurrentFrame(): iFrame {\n    return this.frames[this.currentFrameIndex];\n  }\n\n  getCurrentFrameIndex(): number {\n    return this.currentFrameIndex;\n  }\n\n  getFrames(): iFrame[] {\n    return this.frames;\n  }\n\n  getFramesCount(): number {\n    return this.frames.length;\n  }\n\n  isLastFrame(): boolean {\n    return this.currentFrameIndex === this.frames.length - 1;\n  }\n\n  isCompleted(): boolean {\n    if (this.isLastFrame()) {\n      return !this.getCurrentFrame().canAddRoll();\n    }\n    return false;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.scss\";\nimport { Frame } from \"./components/Frame\";\nimport { Pins } from \"./components/Pins\";\nimport { Game } from \"./models/Game\";\nimport { iFrame } from \"./models/models\";\n\ninterface State {\n  frames: iFrame[];\n  game: Game;\n}\n\nfunction getNewGame(): State {\n  const game = new Game();\n  const state = {\n    game,\n    frames: game.getFrames()\n  };\n  return state;\n}\n\nexport class App extends Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = getNewGame();\n  }\n\n  get currentFrame(): iFrame {\n    return this.state.game.getCurrentFrame();\n  }\n\n  updateFrames = (value: number) => {\n    this.state.game.addRoll(value);\n    this.setState({ frames: this.state.frames.slice() });\n  };\n\n  restartGame = () => {\n    this.setState(getNewGame());\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"bowling\">\n          <div className=\"frames\">\n            {this.state.frames.map((frame: iFrame, key: number) => (\n              <Frame\n                key={key + 1}\n                id={key + 1}\n                isActive={key === this.state.game.getCurrentFrameIndex()}\n                isLast={key === this.state.game.getFramesCount() - 1}\n                roll1={frame.getHtmlRoll1()}\n                roll2={frame.getHtmlRoll2()}\n                roll3={frame.getHtmlRoll3 ? frame.getHtmlRoll3() : \"\"}\n                score={frame.hasScoreReady() ? frame.getScore() : undefined}\n              />\n            ))}\n          </div>\n          <Pins\n            min={0}\n            max={this.currentFrame.getPinsLeft()}\n            clickHandler={this.updateFrames}\n          />\n          {this.state.game.isCompleted() ? (\n            <button style={{ marginLeft: \"75px\" }} onClick={this.restartGame}>\n              RESTART\n            </button>\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}